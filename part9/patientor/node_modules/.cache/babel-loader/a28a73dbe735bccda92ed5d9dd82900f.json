{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OlmoLecht\\\\Documents\\\\FullStackWebDev\\\\part9\\\\patientor\\\\src\\\\AddEntryModal\\\\AddEntryForm.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\nimport { TextField, SelectField, DiagnosisSelection, NumberField } from \"../AddPatientModal/FormField\";\nimport { EntryType } from \"../types\";\nimport { useStateValue } from \"../state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst typeOptions = [{\n  value: EntryType.HealthCheck,\n  label: \"HealthCheck\"\n} //{ value: EntryType.Hospital, label: \"Hospital\" },\n//{ value: EntryType.OccupationalHealthcare, label: \"Occupational\" }\n];\n\nconst AddEntryForm = ({\n  onSubmit,\n  onCancel\n}) => {\n  _s();\n\n  const [{\n    diagnoses\n  }] = useStateValue();\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      description: \"\",\n      date: \"\",\n      specialist: \"\",\n      diagnosisCodes: [\"\"],\n      type: EntryType.HealthCheck,\n      healthCheckRating: 0\n    },\n    onSubmit: onSubmit,\n    validate: values => {\n      const requiredError = \"Field is required\";\n      const errors = {};\n\n      if (!values.description) {\n        errors.description = requiredError;\n      }\n\n      if (!values.date) {\n        errors.date = requiredError;\n      }\n\n      if (!values.specialist) {\n        errors.specialist = requiredError;\n      }\n\n      return errors;\n    },\n    children: ({\n      isValid,\n      dirty,\n      setFieldValue,\n      setFieldTouched\n    }) => {\n      return /*#__PURE__*/_jsxDEV(Form, {\n        className: \"form ui\",\n        children: [/*#__PURE__*/_jsxDEV(Field, {\n          label: \"Description\",\n          placeholder: \"Describe the Entry\",\n          name: \"description\",\n          component: TextField\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          label: \"Date\",\n          placeholder: \"YYYY-MM-DD\",\n          name: \"date\",\n          component: TextField\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          label: \"Specialist\",\n          placeholder: \"Specialist\",\n          name: \"specialist\",\n          component: TextField\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(SelectField, {\n          label: \"Type\",\n          name: \"type\",\n          options: typeOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(DiagnosisSelection, {\n          setFieldValue: setFieldValue,\n          setFieldTouched: setFieldTouched,\n          diagnoses: Object.values(diagnoses)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Field, {\n          label: \"healthCheckRating\",\n          min: 0,\n          max: 3,\n          name: \"healthCheckRating\",\n          component: NumberField\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n            floated: \"left\",\n            width: 5,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"button\",\n              onClick: onCancel,\n              color: \"red\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n            floated: \"right\",\n            width: 5,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              floated: \"right\",\n              color: \"green\",\n              disabled: !dirty || !isValid,\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddEntryForm, \"wJ75htrn8DHDKCcC5XPPFvOTjE8=\", false, function () {\n  return [useStateValue];\n});\n\n_c = AddEntryForm;\nexport default AddEntryForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddEntryForm\");","map":{"version":3,"sources":["C:/Users/OlmoLecht/Documents/FullStackWebDev/part9/patientor/src/AddEntryModal/AddEntryForm.tsx"],"names":["React","Grid","Button","Field","Formik","Form","TextField","SelectField","DiagnosisSelection","NumberField","EntryType","useStateValue","typeOptions","value","HealthCheck","label","AddEntryForm","onSubmit","onCancel","diagnoses","description","date","specialist","diagnosisCodes","type","healthCheckRating","values","requiredError","errors","isValid","dirty","setFieldValue","setFieldTouched","Object"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Grid, Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\n\r\nimport { TextField, SelectField, TypeOption, DiagnosisSelection, NumberField } from \"../AddPatientModal/FormField\";\r\nimport { Entry, EntryType } from \"../types\";\r\nimport { useStateValue } from \"../state\";\r\n\r\nexport type EntryFormValues = Omit<Entry, \"id\">;\r\n\r\ninterface Props {\r\n  onSubmit: (values: EntryFormValues) => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nconst typeOptions: TypeOption[] = [\r\n  { value: EntryType.HealthCheck, label: \"HealthCheck\" },\r\n  //{ value: EntryType.Hospital, label: \"Hospital\" },\r\n  //{ value: EntryType.OccupationalHealthcare, label: \"Occupational\" }\r\n];\r\n\r\n\r\nconst AddEntryForm = ({ onSubmit, onCancel }: Props) => {\r\n  const [{ diagnoses }] = useStateValue();\r\n  \r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        description: \"\",\r\n        date: \"\",\r\n        specialist: \"\",\r\n        diagnosisCodes: [\"\"],\r\n        type: EntryType.HealthCheck,\r\n        healthCheckRating: 0\r\n      }}\r\n      onSubmit={onSubmit}\r\n      validate={values => {\r\n        const requiredError = \"Field is required\";\r\n        const errors: { [field: string]: string } = {};\r\n        if (!values.description) {\r\n          errors.description = requiredError;\r\n        }\r\n        if (!values.date) {\r\n          errors.date = requiredError;\r\n        }\r\n        if (!values.specialist) {\r\n          errors.specialist = requiredError;\r\n        }\r\n        return errors;\r\n      }}\r\n    >\r\n      {({ isValid, dirty, setFieldValue, setFieldTouched }) => {\r\n        return (\r\n          <Form className=\"form ui\">\r\n            <Field\r\n              label=\"Description\"\r\n              placeholder=\"Describe the Entry\"\r\n              name=\"description\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Date\"\r\n              placeholder=\"YYYY-MM-DD\"\r\n              name=\"date\"\r\n              component={TextField}\r\n            />\r\n            <Field\r\n              label=\"Specialist\"\r\n              placeholder=\"Specialist\"\r\n              name=\"specialist\"\r\n              component={TextField}\r\n            />\r\n            <SelectField\r\n              label=\"Type\"\r\n              name=\"type\"\r\n              options={typeOptions}\r\n            />\r\n            <DiagnosisSelection            \r\n              setFieldValue={setFieldValue}            \r\n              setFieldTouched={setFieldTouched}            \r\n              diagnoses={Object.values(diagnoses)}          \r\n            />\r\n            <Field\r\n              label=\"healthCheckRating\"\r\n              min={0}\r\n              max={3}\r\n              name=\"healthCheckRating\"\r\n              component={NumberField}\r\n            />\r\n\r\n\r\n            <Grid>\r\n              <Grid.Column floated=\"left\" width={5}>\r\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\r\n                  Cancel\r\n                </Button>\r\n              </Grid.Column>\r\n              <Grid.Column floated=\"right\" width={5}>\r\n                <Button\r\n                  type=\"submit\"\r\n                  floated=\"right\"\r\n                  color=\"green\"\r\n                  disabled={!dirty || !isValid}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </Grid.Column>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default AddEntryForm;"]},"metadata":{},"sourceType":"module"}