{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OlmoLecht\\\\Documents\\\\FullStackWebDev\\\\part9\\\\patientor\\\\src\\\\PatientListPage\\\\PatientListing.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Icon } from \"semantic-ui-react\";\nimport { apiBaseUrl } from \"../constants\";\nimport { setPatient, useStateValue } from \"../state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PatientListing = () => {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const [{\n    patient\n  }, dispatch] = useStateValue();\n\n  if (!patient || patient.id !== id) {\n    console.log('fetching patient data');\n    React.useEffect(() => {\n      const fetchPatient = async () => {\n        try {\n          const {\n            data: patientFromApi\n          } = await axios.get(`${apiBaseUrl}/patients/${id}`);\n          dispatch(setPatient(patientFromApi));\n        } catch (e) {\n          console.error(e);\n        }\n      };\n\n      void fetchPatient();\n    }, [dispatch]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        loading: true,\n        name: \"spinner\",\n        size: \"massive\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (patient.entries) {\n    React.useEffect(() => {\n      const fetchDiagnosisCodes = async () => {\n        try {\n          const {\n            data: diagnosesFromApi\n          } = await axios.get(`${apiBaseUrl}/diagnoses`);\n        } catch (e) {\n          console.error(e);\n        }\n      };\n\n      void fetchDiagnosisCodes();\n    }, [dispatch]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [patient.name, patient.gender === 'male' ? /*#__PURE__*/_jsxDEV(Icon, {\n        name: \"mars\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 38\n      }, this) : null, patient.gender === 'female' ? /*#__PURE__*/_jsxDEV(Icon, {\n        name: \"venus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 40\n      }, this) : null, patient.gender === 'other' ? /*#__PURE__*/_jsxDEV(Icon, {\n        name: \"transgender alternate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 39\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"ssn: \", patient.ssn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"occupation: \", patient.occupation]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"entries\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), patient.entries.map(entry => {\n      var _entry$diagnosisCodes;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [entry.date, \": \", entry.description, /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: (_entry$diagnosisCodes = entry.diagnosisCodes) === null || _entry$diagnosisCodes === void 0 ? void 0 : _entry$diagnosisCodes.map(code => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: code\n          }, code, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, entry.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PatientListing, \"r8PxQz78/BRO0iWaN/m2qOFio78=\", false, function () {\n  return [useParams, useStateValue];\n});\n\n_c = PatientListing;\nexport default PatientListing;\n\nvar _c;\n\n$RefreshReg$(_c, \"PatientListing\");","map":{"version":3,"sources":["C:/Users/OlmoLecht/Documents/FullStackWebDev/part9/patientor/src/PatientListPage/PatientListing.tsx"],"names":["axios","React","useParams","Icon","apiBaseUrl","setPatient","useStateValue","PatientListing","id","patient","dispatch","console","log","useEffect","fetchPatient","data","patientFromApi","get","e","error","entries","fetchDiagnosisCodes","diagnosesFromApi","name","gender","ssn","occupation","map","entry","date","description","diagnosisCodes","code"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport { apiBaseUrl } from \"../constants\";\r\nimport { setPatient, useStateValue } from \"../state\";\r\nimport { Diagnosis, Patient } from \"../types\";\r\n\r\nconst PatientListing = (): JSX.Element => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const [{ patient }, dispatch] = useStateValue();\r\n\r\n  if (!patient || patient.id !== id) {\r\n    console.log('fetching patient data');\r\n    React.useEffect(() => {\r\n      const fetchPatient = async () => {\r\n        try {\r\n          const { data: patientFromApi } = await axios.get<Patient>(\r\n            `${apiBaseUrl}/patients/${id}`\r\n          );\r\n          dispatch(setPatient(patientFromApi));\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      };\r\n      void fetchPatient();\r\n    }, [dispatch]); \r\n\r\n    return (\r\n      <div>\r\n        <Icon loading name='spinner' size='massive'/>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (patient.entries) {\r\n    React.useEffect(() => {\r\n      const fetchDiagnosisCodes = async () => {\r\n        try {\r\n          const { data: diagnosesFromApi } = await axios.get<Diagnosis>(\r\n            `${apiBaseUrl}/diagnoses`\r\n          );\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      }\r\n      void fetchDiagnosisCodes();\r\n    }, [dispatch]);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>\r\n        {patient.name} \r\n        \r\n        {patient.gender === 'male' ? <Icon name='mars' /> : null}\r\n        {patient.gender === 'female' ? <Icon name='venus' /> : null}\r\n        {patient.gender === 'other' ? <Icon name='transgender alternate' /> : null}\r\n      </h2>\r\n      \r\n      <p>\r\n        ssn: {patient.ssn}\r\n      </p>\r\n      <p>\r\n        occupation: {patient.occupation}\r\n      </p>\r\n      <h4>entries</h4>\r\n      {patient.entries.map(entry => \r\n        <div key={entry.id}>\r\n          {entry.date}: {entry.description}\r\n          <ul>\r\n            {entry.diagnosisCodes?.map(code => \r\n              <li key={code}>{code}</li>\r\n            )}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientListing;"]},"metadata":{},"sourceType":"module"}