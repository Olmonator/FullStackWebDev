{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OlmoLecht\\\\Documents\\\\FullStackWebDev\\\\part9\\\\patientor\\\\src\\\\PatientListPage\\\\PatientListing.tsx\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { apiBaseUrl } from \"../constants\";\nimport { useStateValue, setPatient } from \"../state\";\nimport EntryDetails from \"../components/EntryDetails\";\nimport AddEntryModal from \"../AddEntryModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PatientListing = () => {\n  _s();\n\n  const [{\n    patient\n  }, dispatch] = useStateValue();\n  const {\n    id\n  } = useParams();\n\n  if (!patient || patient.id !== id) {\n    console.log('fetching patient data');\n    React.useEffect(() => {\n      const fetchPatient = async () => {\n        try {\n          const {\n            data: patientFromApi\n          } = await axios.get(`${apiBaseUrl}/patients/${id}`);\n          dispatch(setPatient(patientFromApi));\n        } catch (e) {\n          console.error(e);\n        }\n      };\n\n      void fetchPatient();\n    }, [dispatch]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Icon, {\n        loading: true,\n        name: \"spinner\",\n        size: \"big\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [patient.name, patient.gender === 'male' ? /*#__PURE__*/_jsxDEV(Icon, {\n        name: \"mars\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 38\n      }, this) : null, patient.gender === 'female' ? /*#__PURE__*/_jsxDEV(Icon, {\n        name: \"venus\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 40\n      }, this) : null, patient.gender === 'other' ? /*#__PURE__*/_jsxDEV(Icon, {\n        name: \"transgender alternate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 39\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"ssn: \", patient.ssn]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"occupation: \", patient.occupation]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), patient.entries.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"entries\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this), patient.entries.map(entry => /*#__PURE__*/_jsxDEV(EntryDetails, {\n        entry: entry\n      }, entry.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }, this))]\n    }, void 0, true) : null, /*#__PURE__*/_jsxDEV(AddEntryModal, {\n      modalOpen: modalOpen,\n      onSubmit: submitNewEntry,\n      error: error,\n      onClose: closeModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => openModal(),\n      children: \"Add New Patient\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PatientListing, \"2wso+X4EtfUSEmp5ATOjsR7VQsQ=\", false, function () {\n  return [useStateValue, useParams];\n});\n\n_c = PatientListing;\nexport default PatientListing;\n\nvar _c;\n\n$RefreshReg$(_c, \"PatientListing\");","map":{"version":3,"sources":["C:/Users/OlmoLecht/Documents/FullStackWebDev/part9/patientor/src/PatientListPage/PatientListing.tsx"],"names":["axios","React","useParams","Button","Icon","apiBaseUrl","useStateValue","setPatient","EntryDetails","AddEntryModal","PatientListing","patient","dispatch","id","console","log","useEffect","fetchPatient","data","patientFromApi","get","e","error","name","gender","ssn","occupation","entries","length","map","entry","modalOpen","submitNewEntry","closeModal","openModal"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Button, Icon } from \"semantic-ui-react\";\r\nimport { apiBaseUrl } from \"../constants\";\r\nimport { createEntry, useStateValue, setPatient } from \"../state\";\r\nimport { Entry, Patient } from \"../types\";\r\nimport EntryDetails from \"../components/EntryDetails\";\r\nimport AddEntryModal from \"../AddEntryModal\";\r\nimport { EntryFormValues } from \"../AddEntryModal/AddEntryForm\";\r\n\r\nconst PatientListing = (): JSX.Element => {\r\n  const [{ patient }, dispatch] = useStateValue();\r\n  const { id } = useParams<{ id: string }>(); \r\n\r\n\r\n\r\n  if (!patient || patient.id !== id) {\r\n    console.log('fetching patient data');\r\n    React.useEffect(() => {\r\n      const fetchPatient = async () => {\r\n        try {\r\n          const { data: patientFromApi } = await axios.get<Patient>(\r\n            `${apiBaseUrl}/patients/${id}`\r\n          );\r\n          dispatch(setPatient(patientFromApi));\r\n        } catch (e) {\r\n          console.error(e);\r\n        }\r\n      };\r\n      void fetchPatient();\r\n    }, [dispatch]); \r\n    return (\r\n      <div>\r\n        <Icon loading name='spinner' size='big' />\r\n      </div>\r\n    );\r\n  }\r\n   \r\n  return (\r\n    <div>\r\n      <h2>\r\n        {patient.name} \r\n        \r\n        {patient.gender === 'male' ? <Icon name='mars' /> : null}\r\n        {patient.gender === 'female' ? <Icon name='venus' /> : null}\r\n        {patient.gender === 'other' ? <Icon name='transgender alternate' /> : null}\r\n      </h2>\r\n      \r\n      <p>\r\n        ssn: {patient.ssn}\r\n      </p>\r\n      <p>\r\n        occupation: {patient.occupation}\r\n      </p>\r\n      {patient.entries.length > 0\r\n        ? <>\r\n            <h4>entries</h4>\r\n            {patient.entries.map(entry =>\r\n              <EntryDetails key={entry.id} entry={entry} />\r\n            )}\r\n          </>\r\n        : null\r\n      }\r\n      <AddEntryModal\r\n        modalOpen={modalOpen}\r\n        onSubmit={submitNewEntry}\r\n        error={error}\r\n        onClose={closeModal}\r\n      />\r\n      <Button onClick={() => openModal()}>Add New Patient</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PatientListing;"]},"metadata":{},"sourceType":"module"}